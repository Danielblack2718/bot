import asyncio
import os
import aiogram
import Config
from InstanceBot import bot
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from db import db
import Keyboards
import User


async def admin(message: types.Message):
    user_id = message.from_user.id

    if user_id in Config.admins:
        if message.text == '/adm':
            await User.admin.start.set()
            await message.answer(
                text=f'<b>–ê–¥–º–∏–Ω –º–µ–Ω—é</b>\n\n'
                     f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n'
                     f'–î–µ–Ω—å: {db.get_users()[0]}\n'
                     f'–ù–µ–¥–µ–ª—è: {db.get_users()[1]}\n'
                     f'–ú–µ—Å—è—Ü: {db.get_users()[2]}\n'
                     f'–í—Å–µ–≥–æ: {len(db.get_users()[3])}',
                reply_markup=Keyboards.admin_menu()
            )


async def choice(call: types.CallbackQuery):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'mail':
        await User.admin.mail_text.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, —Ä–∞–∑–º–µ—Ç–∫–∞ HTML.',
            message_id=call.message.message_id
        )

    if temp[1] == 'category':
        await call.answer()

        await User.admin.add_cat.set()
        await bot.send_message(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        )

    if temp[1] == 'change_cat':
        await User.admin.change_cat.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(0, adm=True)
        )

    if temp[1] == 'product':
        await User.admin.add_sub.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(0, adm=True)
        )

    if temp[1] == 'change_product':
        await User.admin.change_sub.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(0)
        )

    if temp[1] == 'add_products':
        await User.admin.add_product.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(0)
        )


#######################
async def get_category_name(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['cat_name'] = message.text

    await User.admin.add_cat_photo.set()
    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.'
    )


async def get_category_photo(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        cat_name = data['cat_name']

    if message.photo:
        db.add_category(cat_name, message.photo[-1].file_id)

    else:
        db.add_category(cat_name, 0)

    await User.admin.start.set()
    await message.answer(
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
        reply_markup=Keyboards.admin_menu()
    )


async def choice_cat(call: types.CallbackQuery):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'next':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(int(temp[2]), adm=True)
        )

    elif temp[1] == 'back':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(int(temp[2]), adm=True)
        )

    elif temp[1] == 'menu':
        await User.admin.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–ê–¥–º–∏–Ω-–º–µ–Ω—é',
            message_id=call.message.message_id,
            reply_markup=Keyboards.admin_menu()
        )

    else:
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.change_cat(temp[1])
        )


async def change_cat(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'cat_name':
        await call.answer()

        async with state.proxy() as data:
            data['cat_id'] = temp[2]

        await User.admin.change_cat_name.set()
        await bot.send_message(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        )

    if temp[1] == 'del':
        db.delete_category(temp[2])

        await User.admin.change_cat.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(0, adm=True)
        )

    if temp[1] == 'back':
        await User.admin.change_cat.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(0, adm=True)
        )


async def update_cat_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        cat_id = data['cat_id']

    db.update_cat_name(cat_id, message.text)

    await User.admin.change_cat.set()
    await message.answer(
        text='–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!',
        reply_markup=Keyboards.category(0, adm=True)
    )


#########################
async def choice_category(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'next':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(int(temp[2]), adm=True)
        )

    elif temp[1] == 'back':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.category(int(temp[2]), adm=True)
        )

    elif temp[1] == 'menu':
        await User.admin.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–ê–¥–º–∏–Ω-–º–µ–Ω—é',
            message_id=call.message.message_id,
            reply_markup=Keyboards.admin_menu()
        )

    else:
        await call.answer()

        async with state.proxy() as data:
            data['cat_id'] = temp[1]

        await bot.send_message(
            chat_id=user_id,
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ:\n'
                 '–ù–ê–ó–í–ê–ù–ò–ï\n'
                 '–¶–ï–ù–ê –í –†–£–ë\n'
                 '–°–°–´–õ–ö–ê –ù–ê –û–ü–ò–°–ê–ù–ò–ï (–µ—Å–ª–∏ –Ω–µ—Ç, —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞)\n'
                 '–¢–ò–ü –¢–û–í–ê–†–ê (–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–æ–º > 1, –µ—Å–ª–∏ –Ω–µ—Ç > 0)'
        )


async def get_product_info(message: types.Message, state: FSMContext):
    product_info = message.text.split('\n')

    async with state.proxy() as data:
        data['product_name'] = product_info[0]
        data['product_cost'] = product_info[1]
        data['product_url'] = product_info[2]
        data['product_type'] = product_info[3]

    if len(product_info) < 4:
        await message.answer(
            text='–ß—Ç–æ-—Ç–æ –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å...'
        )
        return

    await User.admin.add_sub_photo.set()
    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.'
    )


async def get_product_photo(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        cat_id = data['cat_id']
        product_name = data['product_name']
        product_cost = data['product_cost']
        product_url = data['product_url']
        product_type = data['product_type']

    if message.photo:
        db.add_subcategory(
            cat_id,
            product_name,
            product_cost,
            product_url,
            product_type,
            message.photo[-1].file_id
        )
    else:
        db.add_subcategory(
            cat_id,
            product_name,
            product_cost,
            product_url,
            product_type
        )

    await User.admin.start.set()
    await message.answer(
        text=f'–¢–æ–≤–∞—Ä {product_name} –¥–æ–±–∞–≤–ª–µ–Ω!',
        reply_markup=Keyboards.admin_menu()
    )


async def choice_product(call: types.CallbackQuery):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'next':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(int(temp[2]))
        )

    elif temp[1] == 'back':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(int(temp[2]))
        )

    elif temp[1] == 'menu':
        await User.admin.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–ê–¥–º–∏–Ω –º–µ–Ω—é',
            message_id=call.message.message_id,
            reply_markup=Keyboards.admin_menu()
        )

    else:
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.change_sub(temp[1], temp[2])
        )


async def change_sub(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'del':
        db.delete_subcategory(temp[2], temp[3])

        await User.admin.change_sub.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(0)
        )

    if temp[1] == 'cost':
        await call.answer()

        async with state.proxy() as data:
            data['cat_id'] = temp[2]
            data['sub_id'] = temp[3]

        await bot.send_message(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞'
        )

    if temp[1] == 'sub_name':
        await call.answer()

        async with state.proxy() as data:
            data['cat_id'] = temp[2]
            data['sub_id'] = temp[3]

        await User.admin.change_sub_name.set()
        await bot.send_message(
            chat_id=user_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        )

    if temp[1] == 'back':
        await User.admin.change_sub.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:',
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(0)
        )


async def update_cost_sub(message: types.Message, state: FSMContext):
    try:
        r = float(message.text) + 0.5

    except ValueError:
        await message.answer(
            text='–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!'
        )
        return

    async with state.proxy() as data:
        cat_id = data['cat_id']
        sub_id = data['sub_id']

    db.update_cost_product(cat_id, sub_id, int(message.text))

    await User.admin.change_sub.set()
    await message.answer(
        text='–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!',
        reply_markup=Keyboards.adm_products(0)
    )


async def update_sub_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        cat_id = data['cat_id']
        sub_id = data['sub_id']

    db.update_product_name(cat_id, sub_id, message.text)

    await User.admin.change_sub.set()
    await message.answer(
        text='–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!',
        reply_markup=Keyboards.adm_products(0)
    )


#########################
async def choice_sub_product(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'next':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(int(temp[2]))
        )

    elif temp[1] == 'back':
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=Keyboards.adm_products(int(temp[2]))
        )

    elif temp[1] == 'menu':
        await User.admin.start.set()
        await bot.edit_message_text(
            chat_id=user_id,
            text='–ê–¥–º–∏–Ω –º–µ–Ω—é',
            message_id=call.message.message_id,
            reply_markup=Keyboards.admin_menu()
        )
    else:
        await call.answer()

        async with state.proxy() as data:
            data['cat_id'] = temp[1]
            data['sub_id'] = temp[2]

        await bot.send_message(
            chat_id=user_id,
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ txt —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.\n\n'
                 '—Ç–æ–≤–∞—Ä\n'
                 '—Ç–æ–≤–∞—Ä\n'
                 '—Ç–æ–≤–∞—Ä\n\n'
                 '–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º.\n\n'
                 '100'
        )


async def get_product(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        cat_id = data['cat_id']
        sub_id = data['sub_id']

    if message.document:
        file_name = f'./{message.document.file_name}'

        get = await bot.get_file(message.document.file_id)
        await bot.download_file(get.file_path, file_name)

        with open(file_name, 'r') as file:
            r = list(set([i.strip() for i in file if not db.product_exists(i.strip())]))

        os.remove(file_name)

        for i in r:
            db.add_product(cat_id, sub_id, i)

        await User.admin.start.set()
        await message.answer(
            text=f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(r)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!',
            reply_markup=Keyboards.admin_menu()
        )

    else:
        db.add_product(cat_id, sub_id, int(message.text))

        await User.admin.start.set()
        await message.answer(
            text=f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {int(message.text)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!',
            reply_markup=Keyboards.admin_menu()
        )


async def mail_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        r = await message.answer(message.text)
        await bot.delete_message(user_id, r.message_id)

    except aiogram.exceptions.CantParseEntities:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ HTML')
        return

    async with state.proxy() as data:
        data['text'] = message.text

    await User.admin.mail_photo.set()
    await bot.send_message(
        chat_id=user_id,
        text='–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª.'
    )


async def mail_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.photo:
        async with state.proxy() as data:
            data['photo'] = message.photo[-1].file_id
            caption = data['text']

        await bot.send_photo(
            chat_id=user_id,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=Keyboards.accept_mail()
        )

    if message.text:
        async with state.proxy() as data:
            data['photo'] = None
            text = data['text']

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=Keyboards.accept_mail()
        )


async def accept_mail(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    temp = call.data.split('|')

    if temp[1] == 'y':
        async with state.proxy() as data:
            photo = data['photo']
            text = data['text']

        count_a = 0
        count_r = 0

        for i in db.get_users()[3]:
            try:
                if not photo:
                    await bot.edit_message_text(
                        chat_id=user_id,
                        text='<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:</b>\n\n'
                             f'–ü—Ä–æ–≥—Ä–µ—Å—Å: {count_a + count_r} / {len(db.get_users()[3])}\n'
                             f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count_a}\n'
                             f'–û—à–∏–±–æ–∫: {count_r}',
                        message_id=call.message.message_id
                    )

                    await bot.send_message(
                        chat_id=i[1],
                        text=text
                    )
                else:
                    await bot.edit_message_caption(
                        chat_id=user_id,
                        caption='<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:</b>\n\n'
                                f'–ü—Ä–æ–≥—Ä–µ—Å—Å: {count_a + count_r} / {len(db.get_users()[3])}\n'
                                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count_a}\n'
                                f'–û—à–∏–±–æ–∫: {count_r}',
                        message_id=call.message.message_id
                    )

                    await bot.send_photo(
                        chat_id=i[1],
                        photo=photo,
                        caption=text
                    )
                count_a += 1
                await asyncio.sleep(0.25)

            except aiogram.exceptions.BotBlocked:
                count_r += 1
                db.delete_user(i[1])
                await asyncio.sleep(0.25)
                continue

            except aiogram.exceptions.UserDeactivated:
                count_r += 1
                db.delete_user(i[1])
                await asyncio.sleep(0.25)
                continue

            except Exception as e:
                print(e)
                db.delete_user(i[1])
                await asyncio.sleep(0.25)
                continue

        await bot.delete_message(user_id, call.message.message_id)

        await User.admin.start.set()
        await bot.send_message(
            chat_id=user_id,
            text='<b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞:</b>\n\n'
                 f'–ü—Ä–æ–≥—Ä–µ—Å—Å: {count_a + count_r} / {len(db.get_users()[3])}\n'
                 f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count_a}\n'
                 f'–û—à–∏–±–æ–∫: {count_r}',
            reply_markup=Keyboards.admin_menu()
        )

    if temp[1] == 'n':
        await bot.delete_message(user_id, call.message.message_id)

        await User.admin.start.set()
        await bot.send_message(
            chat_id=user_id,
            text=f'<b>–ê–¥–º–∏–Ω –º–µ–Ω—é</b>\n\n'
                 f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n'
                 f'–î–µ–Ω—å: {db.get_users()[0]}\n'
                 f'–ù–µ–¥–µ–ª—è: {db.get_users()[1]}\n'
                 f'–ú–µ—Å—è—Ü: {db.get_users()[2]}\n'
                 f'–í—Å–µ–≥–æ: {len(db.get_users()[3])}',
            reply_markup=Keyboards.admin_menu()
        )


def fhand_add(dp: Dispatcher):
    dp.register_message_handler(admin, commands=['adm', 'balance'], state='*')

    dp.register_message_handler(get_category_name, content_types=['text'], state=User.admin.add_cat)
    dp.register_message_handler(get_category_photo, content_types=['text', 'photo'], state=User.admin.add_cat_photo)

    dp.register_callback_query_handler(choice_category, lambda c: c.data and c.data.startswith('g'),
                                       state=User.admin.add_sub)
    dp.register_message_handler(get_product_info, content_types=['text'], state=User.admin.add_sub)
    dp.register_message_handler(get_product_photo, content_types=['text', 'photo'], state=User.admin.add_sub_photo)

    dp.register_callback_query_handler(choice_cat, lambda c: c.data and c.data.startswith('g'),
                                       state=User.admin.change_cat)
    dp.register_callback_query_handler(change_cat, lambda c: c.data and c.data.startswith('k'),
                                       state=User.admin.change_cat)
    dp.register_message_handler(update_cat_name, content_types=['text'], state=User.admin.change_cat_name)

    dp.register_callback_query_handler(choice_product, lambda c: c.data and c.data.startswith('g'),
                                       state=User.admin.change_sub)
    dp.register_callback_query_handler(change_sub, lambda c: c.data and c.data.startswith('h'),
                                       state=User.admin.change_sub)

    dp.register_message_handler(update_cost_sub, content_types=['text'], state=User.admin.change_sub)
    dp.register_message_handler(update_sub_name, content_types=['text'], state=User.admin.change_sub_name)

    dp.register_callback_query_handler(choice_sub_product, lambda c: c.data and c.data.startswith('g'),
                                       state=User.admin.add_product)
    dp.register_message_handler(get_product, content_types=['text', 'document'], state=User.admin.add_product)

    dp.register_callback_query_handler(choice, lambda c: c.data and c.data.startswith('admin'),
                                       state=User.admin.start)

    dp.register_message_handler(mail_text, content_types=['text'], state=User.admin.mail_text)
    dp.register_message_handler(mail_photo, content_types=['text', 'photo'], state=User.admin.mail_photo)
    dp.register_callback_query_handler(accept_mail, lambda c: c.data and c.data.startswith('admin'),
                                       state=User.admin.mail_photo)
